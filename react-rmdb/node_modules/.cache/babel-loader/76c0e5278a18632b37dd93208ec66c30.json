{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport API from '../API'; //Helpers\n\nimport { isPersistedState } from '../helpers';\nexport const useMovieFetch = movieId => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n        const movie = await API.fetchMovie(movieId);\n        const credits = await API.fetchCredits(movieId); //Get directors only\n\n        const directors = credits.crew.filter(member => member.job === \"Director\");\n        setState({ ...movie,\n          actors: credits.cast,\n          directors\n        });\n        setLoading(false);\n      } catch (error) {\n        setError(true);\n      }\n    };\n\n    const sessionState = isPersistedState(movieId);\n\n    if (sessionState) {\n      setState(sessionState);\n      setLoading(false);\n      return;\n    }\n\n    fetchMovie();\n  }, [movieId]); //Write to sessionStorage\n\n  useEffect(() => {\n    sessionStorage.setItem(movieId, JSON.stringify(state));\n  }, [movieId, state]);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useMovieFetch, \"4jum5QU8vOmk64k7a/gEpScFWmo=\");","map":{"version":3,"sources":["D:/Documents/Downloads/react-rmdb-v3-starter-files-master/react-rmdb-v3-starter-files-master/3. Project to start from - WITH Styles/react-rmdb-START-HERE/src/hooks/useMovieFetch.js"],"names":["useState","useEffect","API","isPersistedState","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchMovie","movie","credits","fetchCredits","directors","crew","filter","member","job","actors","cast","sessionState","sessionStorage","setItem","JSON","stringify"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,QAAhB,C,CACA;;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAI;AAAA;;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACb,UAAMW,UAAU,GAAG,YAAY;AAC3B,UAAI;AACAH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,cAAME,KAAK,GAAG,MAAMX,GAAG,CAACU,UAAJ,CAAeP,OAAf,CAApB;AACA,cAAMS,OAAO,GAAG,MAAMZ,GAAG,CAACa,YAAJ,CAAiBV,OAAjB,CAAtB,CALA,CAMA;;AACA,cAAMW,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAb,CACdC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADX,CAAlB;AAIAb,QAAAA,QAAQ,CAAC,EACL,GAAGM,KADE;AAELQ,UAAAA,MAAM,EAAEP,OAAO,CAACQ,IAFX;AAGLN,UAAAA;AAHK,SAAD,CAAR;AAMAP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAlBD,CAkBE,OAAOC,KAAP,EAAc;AACZC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,KAtBD;;AAwBA,UAAMY,YAAY,GAAGpB,gBAAgB,CAACE,OAAD,CAArC;;AAEA,QAAGkB,YAAH,EAAgB;AACZhB,MAAAA,QAAQ,CAACgB,YAAD,CAAR;AACAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AAEDG,IAAAA,UAAU;AACb,GAlCQ,EAkCN,CAACP,OAAD,CAlCM,CAAT,CALoC,CAyCpC;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZuB,IAAAA,cAAc,CAACC,OAAf,CAAuBpB,OAAvB,EAAgCqB,IAAI,CAACC,SAAL,CAAerB,KAAf,CAAhC;AACH,GAFQ,EAEN,CAACD,OAAD,EAAUC,KAAV,CAFM,CAAT;AAIA,SAAM;AAACA,IAAAA,KAAD;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAN;AACH,CA/CM;;GAAMN,a","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport API from '../API';\r\n//Helpers\r\nimport { isPersistedState } from '../helpers';\r\n\r\nexport const useMovieFetch = movieId => {\r\n    const [state, setState] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect (() => {\r\n        const fetchMovie = async () => {\r\n            try {\r\n                setLoading(true);\r\n                setError(false);\r\n\r\n                const movie = await API.fetchMovie(movieId);\r\n                const credits = await API.fetchCredits(movieId);\r\n                //Get directors only\r\n                const directors = credits.crew.filter(\r\n                    member => member.job === \"Director\"\r\n                );\r\n\r\n                setState({\r\n                    ...movie,\r\n                    actors: credits.cast,\r\n                    directors \r\n                });\r\n\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setError(true);\r\n            }\r\n        };\r\n\r\n        const sessionState = isPersistedState(movieId);\r\n\r\n        if(sessionState){\r\n            setState(sessionState);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        fetchMovie();\r\n    }, [movieId]);\r\n\r\n    //Write to sessionStorage\r\n    useEffect(() => {\r\n        sessionStorage.setItem(movieId, JSON.stringify(state));\r\n    }, [movieId, state]);\r\n\r\n    return{state, loading, error};\r\n} "]},"metadata":{},"sourceType":"module"}