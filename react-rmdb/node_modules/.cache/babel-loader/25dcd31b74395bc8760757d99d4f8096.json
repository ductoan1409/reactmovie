{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\Desktop\\\\App\\\\react-rmdb\\\\src\\\\components\\\\Movie.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useParams } from 'react-router-dom'; //config\n\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config'; //components\n\nimport BreadCrumb from './BreadCrumb';\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from './MovieInfoBar';\nimport Actor from './Actor'; //hook\n\nimport { useMovieFetch } from '../hooks/useMovieFetch'; //image\n\nimport NoImage from '../images/no_image.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Movie = () => {\n  _s();\n\n  const {\n    movieId\n  } = useParams();\n  const {\n    state: movie,\n    loading,\n    error\n  } = useMovieFetch(movieId);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 24\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Something went wrong...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 22\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BreadCrumb, {\n      movieTitle: movie.original_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieInfo, {\n      movie: movie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieInfoBar, {\n      time: movie.runtime,\n      budget: movie.budget,\n      revenue: movie.revenue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      header: \"Actor\",\n      children: movie.actors.map(actor => /*#__PURE__*/_jsxDEV(Actor, {\n        name: actor.name,\n        character: actor.character,\n        imageUrl: actor.profile_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}` : NoImage\n      }, actor.credit_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Movie, \"VvJqC3A/Slcm+qO0UEAZeRQPTSE=\", false, function () {\n  return [useParams, useMovieFetch];\n});\n\n_c = Movie;\nexport default Movie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"sources":["D:/Documents/Desktop/App/react-rmdb/src/components/Movie.js"],"names":["React","useParams","IMAGE_BASE_URL","POSTER_SIZE","BreadCrumb","Grid","Spinner","MovieInfo","MovieInfoBar","Actor","useMovieFetch","NoImage","Movie","movieId","state","movie","loading","error","original_title","runtime","budget","revenue","actors","map","actor","name","character","profile_path","credit_id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CACA;;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,WAA5C,C,CACA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,SAASC,aAAT,QAA8B,wBAA9B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,wBAApB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM;AAACC,IAAAA;AAAD,MAAYZ,SAAS,EAA3B;AAEA,QAAM;AAACa,IAAAA,KAAK,EAAEC,KAAR;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,MAAiCP,aAAa,CAACG,OAAD,CAApD;AAEA,MAAGG,OAAH,EAAY,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACZ,MAAGC,KAAH,EAAU,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEV,sBACI;AAAA,4BACI,QAAC,UAAD;AAAY,MAAA,UAAU,EAAEF,KAAK,CAACG;AAA9B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEH;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,YAAD;AACI,MAAA,IAAI,EAAEA,KAAK,CAACI,OADhB;AAEI,MAAA,MAAM,EAAEJ,KAAK,CAACK,MAFlB;AAGI,MAAA,OAAO,EAAEL,KAAK,CAACM;AAHnB;AAAA;AAAA;AAAA;AAAA,YAHJ,eAQI,QAAC,IAAD;AAAM,MAAA,MAAM,EAAE,OAAd;AAAA,gBACKN,KAAK,CAACO,MAAN,CAAaC,GAAb,CAAiBC,KAAK,iBACnB,QAAC,KAAD;AAEI,QAAA,IAAI,EAAEA,KAAK,CAACC,IAFhB;AAGI,QAAA,SAAS,EAAED,KAAK,CAACE,SAHrB;AAII,QAAA,QAAQ,EACJF,KAAK,CAACG,YAAN,GACG,GAAEzB,cAAe,GAAEC,WAAY,GAAEqB,KAAK,CAACG,YAAa,EADvD,GAEEhB;AAPV,SACSa,KAAK,CAACI,SADf;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA,kBADJ;AAyBH,CAjCD;;GAAMhB,K;UACgBX,S,EAEqBS,a;;;KAHrCE,K;AAmCN,eAAeA,KAAf","sourcesContent":["import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n//config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\r\n//components\r\nimport BreadCrumb from './BreadCrumb';\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\nimport MovieInfo from './MovieInfo';\r\nimport MovieInfoBar from './MovieInfoBar';\r\nimport Actor from './Actor';\r\n//hook\r\nimport { useMovieFetch } from '../hooks/useMovieFetch';\r\n//image\r\nimport NoImage from '../images/no_image.jpg';\r\n\r\nconst Movie = () => {\r\n    const {movieId} = useParams();\r\n\r\n    const {state: movie, loading, error} = useMovieFetch(movieId);\r\n\r\n    if(loading) return <Spinner />\r\n    if(error) return <div>Something went wrong...</div>\r\n    \r\n    return (\r\n        <>\r\n            <BreadCrumb movieTitle={movie.original_title} />\r\n            <MovieInfo movie={movie} />\r\n            <MovieInfoBar \r\n                time={movie.runtime}\r\n                budget={movie.budget}\r\n                revenue={movie.revenue}\r\n            />\r\n            <Grid header ='Actor'>\r\n                {movie.actors.map(actor =>(\r\n                    <Actor\r\n                        key={actor.credit_id}\r\n                        name={actor.name}\r\n                        character={actor.character}\r\n                        imageUrl={\r\n                            actor.profile_path\r\n                            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                            : NoImage\r\n                        }\r\n                    />\r\n                ))}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Movie;"]},"metadata":{},"sourceType":"module"}